---
- hosts: localhost
  #collections: ansible_collections
  become: false
  connection: local
  gather_facts: False
  vars:
    #todo: add it auto
    keypair: Teradici
    #todo: add it by keys
    instance_type: t2.micro
  tasks:
    - name: debug
      debug: msg="{{hostvars[inventory_hostname][item]}}"
      with_items: var_list
      when: hostvars[inventory_hostname][item] is defined

#    - name: clean up a key if exists
#      ec2_key:
#        state: absent
#        name: bandwidth_tester_ssh_key
#      ignore_errors: yes
#
#    - name: Create a new EC2 key
#      ec2_key:
#        force: yes
#        name: bandwidth_tester_ssh_key
#        region: "{{ region }}"
#      register: ec2_sshkey_result

    - name: get info about subnet
      amazon.aws.ec2_vpc_subnet_info:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        subnet_ids: "{{vpc_subnet}}"
      register: subnetinfo

    - name: setting vpc info
      set_fact:
        vpc_id: "{{ subnetinfo.subnets[0].vpc_id }}"
        cacheable: yes

#Todo: get it from ini/vars
    - name: open ports
      amazon.aws.ec2_group:
        name: "bandwidth_tester_group"
        description: bandwidth_tester security group
        vpc_id: "{{vpc_id}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        rules:
        - proto: tcp
          ports:
          - 22
          - "{{ data_port }}"
          - "{{ command_port }}"
          -  "{{ iperf3_server_port }}"
          cidr_ip: 0.0.0.0/0
          rule_desc: allow required traffic


    - name: setting up EC2 instance
      amazon.aws.ec2:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        key_name: "{{ ssh_key_name }}"
        group: "bandwidth_tester_group"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        vpc_subnet_id:  "{{vpc_subnet}}"
        assign_public_ip: yes
        count: 2
      register: ec2

    - name: debug
      debug: msg="{{ec2}}"

  #    - name: debug
#      debug: msg="{{vpc_id}}"
    - name: setting var with hosts of ec2 machines
      set_fact:
        ec2hosts: "{{ ec2.instances | map(attribute='public_dns_name')|list }}"
        cacheable: yes

    - name: setting var with ec2 ids
      set_fact:
        ec2ids: "{{ ec2.instances | map(attribute='id')|list }}"
        cacheable: yes

    - name: Add created ec2 instances into host group
      add_host: hostname={{item}} groupname=bandwidth_tester_group
      with_items: "{{ ec2hosts }}"

#    - name: debug ssh
#      debug: msg="ec2_sshkey_result {{ ec2_sshkey_result }}"
#
#    - name: Save private key
#      copy: content="{{ ec2_sshkey_result.key.private_key }}" dest="./bandwidth_tester.pem" mode=0600
#      when: ec2_sshkey_result.changed

  # we use this approach due wait_for_connection doesn't support one timeout for several instances
    - name: Let AWS boots both ec2 instances
      pause:
        seconds: 40

    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        #delay: 60
        timeout: 300
      loop: "{{ ec2.instances }}"

    - name: debug vars
      debug: msg="vpc_id:{{vpc_id}} ec2hosts:{{ec2hosts}} ec2ids:{{ec2ids}}"

- hosts: bandwidth_tester_group
  vars:
    ansible_ssh_private_key_file: "{{ ssh_key_name }}"
  user: ubuntu
  #sudo: true
  tasks:

    - name: apt update
      raw: apt update
      become: yes

    - name: install required for ansible packages
      raw: apt -y install python3-pip virtualenv python3-setuptools
      become: yes

    - name: Upgrade installed packages
      apt:
        upgrade: dist
      become: yes

    - name: install required packages
      apt:
        pkg:
          - git
          - iperf3
      become: yes

    - name: Git checkout
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_puppet_dest }}"
        #version: release-0.22

    - name: Install specified python requirements
      pip:
        requirements: /home/ubuntu/bandwidth_tester/requirements_puppet.txt
      become: yes

    - name: Run a puppet program in the background
      shell: cd /home/ubuntu/bandwidth_tester; nohup /home/ubuntu/bandwidth_tester/bandwidth_tester_puppet.py </dev/null >/dev/null 2>&1 &