---
- hosts: localhost
  #collections: ansible_collections
  become: false
  connection: local
  gather_facts: False
  tasks:

    - name: get info about subnet
      amazon.aws.ec2_vpc_subnet_info:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        subnet_ids: "{{vpc_subnet}}"
      register: subnetinfo

    - name: setting vpc info
      set_fact:
        vpc_id: "{{ subnetinfo.subnets[0].vpc_id }}"
        cacheable: yes

#Todo: get it from ini/vars
    - name: open ports
      amazon.aws.ec2_group:
        name: "bandwidth_tester_group"
        description: bandwidth_tester security group
        vpc_id: "{{vpc_id}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        rules:
        - proto: tcp
          ports:
          - 22
          - "{{ data_port }}"
          - "{{ command_port }}"
          -  "{{ iperf3_server_port }}"
          cidr_ip: 0.0.0.0/0
          rule_desc: allow required traffic

    - name: debug
      debug:
        msg: "launch_mode_with_vcpu={{ launch_mode_with_vcpu }}"

    - name: setting up EC2 instance - server. Custom vCpu amount. Launch it in the background
      community.aws.ec2_instance:
        name: "iperf3-server"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        vpc_subnet_id: "{{vpc_subnet}}"
        key_name: "{{ ssh_key_name }}"
        network:
          assign_public_ip: true
        security_group: "bandwidth_tester_group"
        image_id: "{{ image }}"
        region: "{{ region }}"
        cpu_options:
          core_count: "{{ vcpu_server }}"
          threads_per_core: 1
        instance_type: "{{ instance_type_server }}"
        wait: no
      register: ec2_server_vcpu
      when: launch_mode_with_vcpu

    - name: setting up EC2 instance - client. Custom vCpu amount. Launch it in the background
      community.aws.ec2_instance:
        name: "iperf3-client"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        vpc_subnet_id: "{{vpc_subnet}}"
        key_name: "{{ ssh_key_name }}"
        network:
          assign_public_ip: true
        security_group: "bandwidth_tester_group"
        image_id: "{{ image }}"
        region: "{{ region }}"
        cpu_options:
          core_count: "{{ vcpu_client }}"
          threads_per_core: 1
        instance_type: "{{ instance_type_client }}"
        wait: no
      register: ec2_client_vcpu
      when: launch_mode_with_vcpu

    - name: setting up EC2 instance - server. Standard vCPU settings. Launch it in the background
      community.aws.ec2_instance:
        name: "iperf3-server"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        vpc_subnet_id: "{{vpc_subnet}}"
        key_name: "{{ ssh_key_name }}"
        network:
          assign_public_ip: true
        security_group: "bandwidth_tester_group"
        image_id: "{{ image }}"
        region: "{{ region }}"
        instance_type: "{{ instance_type_server }}"
        wait: no
      register: ec2_server_standard
      when: not launch_mode_with_vcpu

    - name: setting up EC2 instance - client. Standard vCPU settings. Launch it in the background
      community.aws.ec2_instance:
        name: "iperf3-client"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        vpc_subnet_id: "{{vpc_subnet}}"
        key_name: "{{ ssh_key_name }}"
        network:
          assign_public_ip: true
        security_group: "bandwidth_tester_group"
        image_id: "{{ image }}"
        region: "{{ region }}"
        instance_type: "{{ instance_type_client }}"
        wait: no
      register: ec2_client_standard
      when: not launch_mode_with_vcpu



    - name: setting up ec2 server results var - vcpu
      set_fact:
        ec2_server: "{{ ec2_server_vcpu }}"
      when: launch_mode_with_vcpu

    - name: setting up ec2 server results var - standard instance type
      set_fact:
        ec2_server: "{{ ec2_server_standard  }}"
      when: not launch_mode_with_vcpu


    - name: setting up ec2 client results var - vcpu
      set_fact:
        ec2_client: "{{ ec2_client_vcpu }}"
      when: launch_mode_with_vcpu

    - name: setting up ec2 client results var - - standard instance type
      set_fact:
        ec2_client: "{{ ec2_client_standard }}"
      when: not launch_mode_with_vcpu


    - name: debug
      debug:
        msg: "server: {{ec2_server}}, client: {{ec2_client}}"

    - name: setting var with ec2 ids - server
      set_fact:
        server_ec2_id: "{{ ec2_server.instance_ids[0] }}"
        cacheable: yes

    - name: setting var with ec2 ids - server
      set_fact:
        client_ec2_id: "{{ ec2_client.instance_ids[0] }}"
        cacheable: yes

    - name: setting up facts for the server - we're waiting until it will be up
      community.aws.ec2_instance_info:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        instance_ids: "{{ server_ec2_id }}"
      register: ec2_server_info
      until: ec2_server_info.instances[0].metadata_options.state == 'applied'
      retries: 40
      delay: 5

    - name: server info
      debug:
        msg: "{{ ec2_server_info }}"

    - name: setting up facts for the client - we're waiting until it will be up
      community.aws.ec2_instance_info:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        region: "{{ region }}"
        instance_ids: "{{ client_ec2_id }}"
      register: ec2_client_info
      until: ec2_client_info.instances[0].metadata_options.state == 'applied'
      retries: 40
      delay: 5


    - name: setting up var with public DNS name of EC2 instance - server
      set_fact:
        ext_server: "{{ ec2_server_info.instances[0].public_dns_name }}"
        cacheable: yes

    - name: setting up public DNS name of EC2 instance - client
      set_fact:
        ext_client: "{{ ec2_client_info.instances[0].public_dns_name }}"
        cacheable: yes


    - name: setting up var with private DNS name of EC2 instance - server
      set_fact:
        int_server: "{{ ec2_server_info.instances[0].private_dns_name }}"
        cacheable: yes

    - name: setting up var with private DNS name of EC2 instance - client
      set_fact:
        int_client: "{{ ec2_client_info.instances[0].private_dns_name }}"
        cacheable: yes

    - name: Add created ec2 instances into host group
      add_host: hostname={{item}} groupname=bandwidth_tester_group
      with_items:
        - "{{ ext_server }}"
        - "{{ ext_client }}"

  # we use this approach due wait_for_connection doesn't support one timeout for several instances
    - name: Let AWS boots both ec2 instances
      pause:
        seconds: 40

    - name: Wait for SSH to come up
      delegate_to: "{{ item }}"
      wait_for_connection:
        timeout: 300
      with_items:
        - "{{ ext_server }}"
        - "{{ ext_client }}"

#
- hosts: bandwidth_tester_group
  vars:
    ansible_ssh_private_key_file: "{{ ssh_key_name }}"
  user: ubuntu
  tasks:

    - name: apt update
      raw: apt update
      become: yes

    - name: install required for ansible packages
      raw: apt -y install python3-pip virtualenv python3-setuptools
      become: yes

    - name: Upgrade installed packages
      apt:
        upgrade: dist
      become: yes

    - name: install required packages
      apt:
        pkg:
          - git
          - iperf3
      become: yes

    - name: Git checkout
      git:
        repo: "{{ git_repo }}"
        dest: "{{ git_puppet_dest }}"
        #Todo: delete it
        #version: "6b3df448a2345a7d8bc499b3fd88c969f27d3d86"

    - name: Install specified python requirements
      pip:
        requirements: /home/ubuntu/bandwidth_tester/requirements_puppet.txt
      become: yes

    - name: launch command
      debug: msg="cd /home/ubuntu/bandwidth_tester; nohup /home/ubuntu/bandwidth_tester/bandwidth_tester_puppet.py {{ iperf3_bind_address }} {{ command_port }} {{ data_port }} </dev/null >/dev/null 2>&1 &"

    - name: Run a puppet program in the background
      shell: "cd /home/ubuntu/bandwidth_tester; nohup /home/ubuntu/bandwidth_tester/bandwidth_tester_puppet.py {{ iperf3_bind_address }} {{ command_port }} {{ data_port }} </dev/null >/dev/null 2>&1 &"